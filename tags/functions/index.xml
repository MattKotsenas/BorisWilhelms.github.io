<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functions on Boris Wilhelms // Coding Blog</title>
    <link>https://blog.wille-zone.de/tags/functions/</link>
    <description>Recent content in Functions on Boris Wilhelms // Coding Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 10 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.wille-zone.de/tags/functions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dependency injection in Azure Functions on function level</title>
      <link>https://blog.wille-zone.de/post/azure-functions-dependency-injection/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wille-zone.de/post/azure-functions-dependency-injection/</guid>
      <description>Out of the box Azure Functions does not come with depdendency injection support you can use in your functions. There are quite a lot of ways to add dependency injection, but most of them rely on the Service Locator (anti-)pattern. In this post you will learn how to implement dependency injection on function level using the extensions API without the Service Locator (anti-)pattern.
Goal The goal is to inject dependencies into our functions as a parameters.</description>
    </item>
    
    <item>
      <title>Build a photo gallery with Azure Functions</title>
      <link>https://blog.wille-zone.de/post/build-a-photo-gallery-with-azure-functions/</link>
      <pubDate>Thu, 14 Sep 2017 17:40:37 +0200</pubDate>
      
      <guid>https://blog.wille-zone.de/post/build-a-photo-gallery-with-azure-functions/</guid>
      <description>With Azure Functions you can quickly build simple web applications. In this example you learn how to create a simple photo gallery with just three little functions. We will use Azure Blob Storage to store the files and Azure Table Storage to save metadata. You can find the example at GitHub.
Creating thumbnails Since we do not want use the original picture as a thumbnail, we will create a function that creates proper thumbnails.</description>
    </item>
    
    <item>
      <title>Secure Azure Functions with jwt token</title>
      <link>https://blog.wille-zone.de/post/secure-azure-functions-with-jwt-token/</link>
      <pubDate>Thu, 20 Jul 2017 17:05:31 +0200</pubDate>
      
      <guid>https://blog.wille-zone.de/post/secure-azure-functions-with-jwt-token/</guid>
      <description>Out of the box it is only possible to secure your Azure Functions via Function Keys (API-Keys), which sometimes might not fit into your requirements. When using HttpTrigger we luckily have access to the current request and are therefor able to implement our own custom authentication/authorization methods. You could for example use jwt tokens to control authentication/authorization.
Here is an example code on how to validate jwt tokens and controling access to your Azure Function.</description>
    </item>
    
  </channel>
</rss>