<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Azure on Boris Wilhelms // Coding Blog</title>
    <link>https://blog.wille-zone.de/tags/azure/</link>
    <description>Recent content in Azure on Boris Wilhelms // Coding Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 11 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.wille-zone.de/tags/azure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proper Dependency injection in Azure Functions on function level with scoped services!</title>
      <link>https://blog.wille-zone.de/post/azure-functions-proper-dependency-injection/</link>
      <pubDate>Wed, 11 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wille-zone.de/post/azure-functions-proper-dependency-injection/</guid>
      <description>In my last post you learned how to implement dependency injection in Azure Functions on function level. While this works for services registered as transient or singleton, it does not work with services registered as scoped. In this post you will learn how we can implement proper dependency injection with scopes!
Inject attribute We again start with the Inject attribute. Since we are going to change how to resolve bindings, the attribute can now be empty.</description>
    </item>
    
    <item>
      <title>Dependency injection in Azure Functions on function level</title>
      <link>https://blog.wille-zone.de/post/azure-functions-dependency-injection/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.wille-zone.de/post/azure-functions-dependency-injection/</guid>
      <description>This solution only supports transient and singleton scoped services. Please see my follow up post where you learn how to implement proper dependency injection with support for scoped services.
Out of the box Azure Functions does not come with dependency injection support you can use in your functions. There are quite a lot of ways to add dependency injection, but most of them rely on the Service Locator (anti-)pattern. In this post you will learn how to implement dependency injection on function level using the extensions API without the Service Locator (anti-)pattern.</description>
    </item>
    
    <item>
      <title>Build a photo gallery with Azure Functions</title>
      <link>https://blog.wille-zone.de/post/build-a-photo-gallery-with-azure-functions/</link>
      <pubDate>Thu, 14 Sep 2017 17:40:37 +0200</pubDate>
      
      <guid>https://blog.wille-zone.de/post/build-a-photo-gallery-with-azure-functions/</guid>
      <description>With Azure Functions you can quickly build simple web applications. In this example you learn how to create a simple photo gallery with just three little functions. We will use Azure Blob Storage to store the files and Azure Table Storage to save metadata. You can find the example at GitHub.
Creating thumbnails Since we do not want use the original picture as a thumbnail, we will create a function that creates proper thumbnails.</description>
    </item>
    
    <item>
      <title>Secure Azure Functions with jwt token</title>
      <link>https://blog.wille-zone.de/post/secure-azure-functions-with-jwt-token/</link>
      <pubDate>Thu, 20 Jul 2017 17:05:31 +0200</pubDate>
      
      <guid>https://blog.wille-zone.de/post/secure-azure-functions-with-jwt-token/</guid>
      <description>Out of the box it is only possible to secure your Azure Functions via Function Keys (API-Keys), which sometimes might not fit into your requirements. When using HttpTrigger we luckily have access to the current request and are therefor able to implement our own custom authentication/authorization methods. You could for example use jwt tokens to control authentication/authorization.
Here is an example code on how to validate jwt tokens and controling access to your Azure Function.</description>
    </item>
    
    <item>
      <title>Access certificates in Azure</title>
      <link>https://blog.wille-zone.de/post/access-certificates-in-azure/</link>
      <pubDate>Wed, 03 May 2017 12:45:42 +0200</pubDate>
      
      <guid>https://blog.wille-zone.de/post/access-certificates-in-azure/</guid>
      <description>&lt;p&gt;Thanks to this &lt;a href=&#34;http://stackoverflow.com/questions/23827884/accessing-uploaded-certificates-in-azure-web-sites&#34; target=&#34;_blank&#34;&gt;Stackoverflow post&lt;/a&gt; for the tip.&lt;/p&gt;

&lt;p&gt;After uploading the certificate using the Azure Portal, you need to add an appsetting called &lt;em&gt;WEBSITE_LOAD_CERTIFICATES&lt;/em&gt;. The value of the setting is the thumbprint of the certificate. We can also pass multiple thumbprints, delimited by comma or use * to load all available certificates. After this the certificates will be loaded to the &lt;em&gt;personal&lt;/em&gt; certificate store of the &lt;em&gt;current user&lt;/em&gt;.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>